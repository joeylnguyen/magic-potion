[{"/Users/joeynguyen/curology-magic-potion/client/src/reportWebVitals.js":"1","/Users/joeynguyen/curology-magic-potion/client/src/index.js":"2","/Users/joeynguyen/curology-magic-potion/client/src/App.js":"3","/Users/joeynguyen/curology-magic-potion/client/src/components/Form/Form.js":"4","/Users/joeynguyen/curology-magic-potion/client/src/components/Form/useForm.js":"5","/Users/joeynguyen/curology-magic-potion/client/src/components/Form/validateForm.js":"6"},{"size":364,"mtime":1606613045377,"results":"7","hashOfConfig":"8"},{"size":500,"mtime":1606380926071,"results":"9","hashOfConfig":"8"},{"size":167,"mtime":1606612953155,"results":"10","hashOfConfig":"8"},{"size":4486,"mtime":1606644201896,"results":"11","hashOfConfig":"12"},{"size":1399,"mtime":1606641615265,"results":"13","hashOfConfig":"12"},{"size":2635,"mtime":1606642433868,"results":"14","hashOfConfig":"12"},{"filePath":"15","messages":"16","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"8sohmt",{"filePath":"17","messages":"18","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"19"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"22","messages":"23","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"24"},"1wgjntt",{"filePath":"25","messages":"26","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/joeynguyen/curology-magic-potion/client/src/reportWebVitals.js",[],"/Users/joeynguyen/curology-magic-potion/client/src/index.js",[],["29","30","31","32","33","34"],"/Users/joeynguyen/curology-magic-potion/client/src/App.js",[],"/Users/joeynguyen/curology-magic-potion/client/src/components/Form/Form.js",["35"],"import React from 'react';\nimport useForm from './useForm';\nimport states from './states';\nimport validateForm from './validateForm';\n\nconst Form = () => {\n  const submit = () => console.log('Submitted!', values);\n  const { values, handleChange, handleSubmit, errors } = useForm(\n    submit,\n    validateForm\n  );\n\n  return (\n    <form onSubmit={handleSubmit}>\n      <h1>Contact | Billing Information</h1>\n      <div>\n        <div>\n          <label htmlFor=\"firstName\">\n            First Name\n            <input\n              id=\"firstName\"\n              name=\"firstName\"\n              value={values.firstName}\n              onChange={handleChange}\n            />\n          </label>\n          {errors.firstName && <p>{errors.firstName}</p>}\n        </div>\n        <div>\n          <label htmlFor=\"lastName\">\n            Last Name\n            <input\n              id=\"lastName\"\n              name=\"lastName\"\n              value={values.lastName}\n              onChange={handleChange}\n            />\n          </label>\n          {errors.lastName && <p>{errors.lastName}</p>}\n        </div>\n        <div>\n          <label htmlFor=\"street1\">\n            Address Line 1\n            <input\n              id=\"street1\"\n              name=\"street1\"\n              value={values.street1}\n              onChange={handleChange}\n            />\n          </label>\n          {errors.street1 && <p>{errors.street1}</p>}\n        </div>\n        <label htmlFor=\"street2\">\n          Address Line 2\n          <input\n            id=\"street2\"\n            name=\"street2\"\n            value={values.street2}\n            onChange={handleChange}\n          />\n        </label>\n        <div>\n          <label htmlFor=\"city\">\n            City\n            <input\n              id=\"city\"\n              name=\"city\"\n              value={values.city}\n              onChange={handleChange}\n            />\n          </label>\n          {errors.city && <p>{errors.city}</p>}\n        </div>\n        <div>\n          <label htmlFor=\"state\">\n            State\n            <select\n              data-testid=\"select-state\"\n              id=\"state\"\n              name=\"state\"\n              value={values.state}\n              onBlur={handleChange}\n              onChange={handleChange}\n            >\n              <option data-testid=\"select-state-option\" key=\"\" value=\"\" />\n              {states.map((state) => (\n                <option\n                  data-testid=\"select-state-option\"\n                  key={state}\n                  value={state}\n                >\n                  {state}\n                </option>\n              ))}\n            </select>\n          </label>\n          {errors.state && <p>{errors.state}</p>}\n        </div>\n        <div>\n          <label htmlFor=\"zipCode\">\n            Zip Code\n            <input\n              id=\"zipCode\"\n              name=\"zipCode\"\n              value={values.zipCode}\n              onChange={handleChange}\n            />\n          </label>\n          {errors.zipCode && <p>{errors.zipCode}</p>}\n        </div>\n        <div>\n          <label htmlFor=\"email\">\n            Email Address\n            <input\n              id=\"email\"\n              name=\"email\"\n              type=\"email\"\n              value={values.email}\n              onChange={handleChange}\n            />\n          </label>\n          {errors.email && <p>{errors.email}</p>}\n        </div>\n        <div>\n          <label htmlFor=\"phone\">\n            Phone Number\n            <input\n              id=\"phone\"\n              name=\"phone\"\n              value={values.phone}\n              onChange={handleChange}\n            />\n          </label>\n          {errors.phone && <p>{errors.phone}</p>}\n        </div>\n        <div>\n          <label htmlFor=\"creditCardNumber\">\n            Credit Card Number\n            <input\n              id=\"creditCardNumber\"\n              name=\"ccNum\"\n              value={values.ccNum}\n              onChange={handleChange}\n            />\n          </label>\n          {errors.ccNum && <p>{errors.ccNum}</p>}\n        </div>\n        <div>\n          <label htmlFor=\"creditCardExp\">\n            Card Expiration\n            <input\n              id=\"creditCardExp\"\n              name=\"exp\"\n              value={values.exp}\n              onChange={handleChange}\n              placeholder=\"mm/yy\"\n            />\n          </label>\n          {errors.exp && <p>{errors.exp}</p>}\n        </div>\n        <button type=\"submit\">Submit</button>\n      </div>\n    </form>\n  );\n};\n\nexport default Form;\n","/Users/joeynguyen/curology-magic-potion/client/src/components/Form/useForm.js",["36"],"/Users/joeynguyen/curology-magic-potion/client/src/components/Form/validateForm.js",[],{"ruleId":"37","replacedBy":"38"},{"ruleId":"39","replacedBy":"40"},{"ruleId":"41","replacedBy":"42"},{"ruleId":"43","replacedBy":"44"},{"ruleId":"45","replacedBy":"46"},{"ruleId":"47","replacedBy":"48"},{"ruleId":"49","severity":1,"message":"50","line":7,"column":24,"nodeType":"51","messageId":"52","endLine":7,"endColumn":35},{"ruleId":"53","severity":1,"message":"54","line":64,"column":6,"nodeType":"55","endLine":64,"endColumn":14,"suggestions":"56"},"jsx-a11y/accessible-emoji",[],"lines-around-directive",["57"],"global-require",[],"no-buffer-constructor",[],"no-new-require",[],"no-path-concat",[],"no-console","Unexpected console statement.","MemberExpression","unexpected","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'callback' and 'isSubmitting'. Either include them or remove the dependency array. If 'callback' changes too often, find the parent component that defines it and wrap that definition in useCallback.","ArrayExpression",["58"],"padding-line-between-statements",{"desc":"59","fix":"60"},"Update the dependencies array to be: [callback, errors, isSubmitting]",{"range":"61","text":"62"},[1283,1291],"[callback, errors, isSubmitting]"]